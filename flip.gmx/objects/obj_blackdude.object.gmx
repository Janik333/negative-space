<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_blackdude</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_blackdude</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>Players</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>interact</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (pause &amp;&amp; sprite_index == spr_blackduderunstrip)
    sprite_index = spr_blackduderun;

if (pause) exit;
key_right = false;
key_left = false;
key_jump = false;
key_jump_held = false
key_down = false;
//Get the player's input
if (controllingPlayerOne)
{
    key_right = keyboard_check(vk_right) || (gamepad_axis_value(0,gp_axislh) &gt; 0) || gamepad_button_check(0,gp_padr);
    key_left = -(keyboard_check(vk_left) || (gamepad_axis_value(0,gp_axislh) &lt; 0) || gamepad_button_check(0,gp_padl));  
    key_jump = keyboard_check_pressed(vk_up) || gamepad_button_check_pressed(0,gp_face1);
    key_jump_held = keyboard_check(vk_up) || gamepad_button_check(0,gp_face1);
    key_down = keyboard_check(vk_down) || gamepad_button_check(0,gp_face2);
    if ((keyboard_check_pressed(vk_enter) || gamepad_button_check_pressed(0,gp_face4)) &amp;&amp; !twoPlayer &amp;&amp; unPressed)
    {
        controllingPlayerOne = !controllingPlayerOne;
        unPressed = false;
    }
    if (keyboard_check_released(vk_enter) || gamepad_button_check_released(0,gp_face4))
        unPressed = true;
}








if (!key_down) 
    grabbing = false;
if (grabbing)
    key_jump = false;

if (place_meeting(x,y+1,obj_blackwall))
{
    isairborne = false;
    aircontrol = 0;
}
else
    isairborne = true;
    
//moving box
if (collision_point(x+17,y,obj_blackpushpull,false,false))
{
    var box = instance_position(x+17,y,obj_blackpushpull);
    if ((collision_point(x,y+29,obj_blackwall,false,false) &amp;&amp; 
        collision_point(x+17,y-35,box, false, false) &amp;&amp; 
        collision_point(x+17,y+27,box, false, false) &amp;&amp; 
        key_down) 
        || snapright || snapleft){
            scr_black_right();
            exit;
    }
}

if (collision_point(x-17,y,obj_blackpushpull,false,false))
{
    var box = instance_position(x-17,y,obj_blackpushpull);
    if ((collision_point(x,y+29,obj_blackwall,false,false) &amp;&amp; 
        collision_point(x-17,y-35,box, false, false) &amp;&amp; 
        collision_point(x-17,y+27,box, false, false) &amp;&amp; 
        key_down) 
        || snapright || snapleft){
            scr_black_left();
            exit;
    }
}

//React to inputs
move = key_left + key_right;

if (!(key_right ^ -key_left))
{
    if(movespeed &gt; 0)
    {
        movespeed -= .5;
        if (movespeed &lt; 0)
            movespeed = 0;
    }
    else if(movespeed &lt; 0)
    {
        movespeed += .5;
        if (movespeed &gt; 0)
            movespeed = 0;
    }
}
else if (key_right)
{
    if (movespeed &lt; 0)
        movespeed += .5;
    movespeed += .25;
    aircontrol = 1;
}
else if (-key_left)
{
    if (movespeed &gt; 0)
        movespeed -= .5;
    movespeed -= .25;
    aircontrol = -1;
}

if (isairborne)
    movespeed = previousmovespeed;
    
if (movespeed &gt; 8)
    movespeed = 8;
if (movespeed &lt; -8)
    movespeed = -8;

previousmovespeed = movespeed;
hsp = movespeed + aircontrol;

if (grabbing = true) hsp /= 2 //half speed when moving block
    
if (vsp &lt; 10) vsp += grav;

if(place_meeting(x,y+1,obj_blackwall))
{
    vsp = key_jump * -jumpspeed;
}

if (vsp &lt; 0) &amp;&amp; (!key_jump_held) vsp = max(vsp,-jumpspeed/4) //variable jump    

//Horizontal Collision

if (place_meeting(x+hsp,y,obj_blackwall))
{
    while(!place_meeting(x+sign(hsp),y,obj_blackwall))
    {
        if (isairborne)
        {
            movespeed = 0;
            previousmovespeed = 0;
        }
        if (!grabbing)
            x += sign(hsp);
    }
    hsp = 0;
    movespeed = 0;
    previousmovespeed = 0;
}

if (!grabbing)
x += hsp;

//Vertical Collision
if (place_meeting(x,y+vsp,obj_blackwall))
{
    while(!place_meeting(x,y+sign(vsp),obj_blackwall))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;

//slip off ball
if (place_meeting(x,y+1,obj_blackball) &amp;&amp; place_meeting(x+2,y,obj_blackball)) x-=2; 
if (place_meeting(x,y+1,obj_blackball) &amp;&amp; place_meeting(x-2,y,obj_blackball)) x+=2; 

//ANIMATION
if (move != 0) image_xscale = move; //flip left right
if (place_meeting(x,y+1,obj_blackwall))
{
    if (move != 0) 
        sprite_index = spr_blackduderunstrip; 
    else if (!twoPlayer &amp;&amp; !controllingPlayerOne)
    {
        sprite_index = spr_blackdudesleep;
        image_xscale = 1;
    }
    else
        sprite_index = spr_blackdude;
    if ((hsp &lt; 0 &amp;&amp; key_right) ||(hsp &gt; 0 &amp;&amp; -key_left))
        sprite_index = spr_blackdudeskid;
}
else
{
    if (vsp &lt; 0) sprite_index = spr_blackdudejump; else sprite_index = spr_blackdudefall;
}
    
//Loop player to other screen edge
if (y &gt; room_height) y = -32;

if (x &gt; room_width - 15)
    if (!place_meeting(x - room_width, y, obj_blackdude))
    {
        instance_create(x - room_width, y, obj_blackdude);
        var inst2 = instance_position(x - room_width, y, obj_blackdude);
        inst2.previousmovespeed = previousmovespeed;
        inst2.movespeed = movespeed;
        inst2.vsp = vsp;
    }
if (x &lt; 15)
    if (!place_meeting(x + room_width, y, obj_blackdude))
    {
        instance_create(x + room_width, y, obj_blackdude);
        var inst2 = instance_position(x + room_width, y, obj_blackdude);
        inst2.previousmovespeed = previousmovespeed;
        inst2.movespeed = movespeed;
        inst2.vsp = vsp;
    }
if (collision_point(x - room_width, y, obj_blackdude, false, false)){
    var inst2 = instance_position(x - room_width, y, obj_blackdude);
    inst2.x = x - room_width;
}
if (x &gt;= room_width+16)
    instance_destroy();
if (x &lt; - 32)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
